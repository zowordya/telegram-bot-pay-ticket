from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram import F
import io
from aiogram import Router, types
import app.keyBoards as kb

from . import database
from .pdf_parser import extract_text_from_pdf, get_line_from_text
import random
import qrcode

router = Router()


@router.message(CommandStart())
async def start_command(message: Message):
    user = message.from_user
    database.add_user(user.id, user.username, user.first_name)
    await message.answer_photo(
        photo="https://i.ibb.co/ThZqqFz/bn.jpg",
        caption='–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–∂–∏—â–µ! –ì–æ—Ç–æ–≤ –∫ —Å–∞–º–æ–º—É –∫—Ä—É—Ç–æ–º—É –≤–µ—á–µ—Ä—É?\n'
                '–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –±—ã—Å—Ç—Ä–æ –∏ –ª–µ–≥–∫–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –±–∏–ª–µ—Ç –Ω–∞ –Ω–∞—à–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, '
                '—É–∑–Ω–∞—Ç—å –≤—Å–µ –¥–µ—Ç–∞–ª–∏ –∏ –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ —Å–æ–±—ã—Ç–∏–π. \n–î–∞–≤–∞–π, –≤—ã–±–∏—Ä–∞–π, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ, '
                '–∏ –¥–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ —Ç—É—Å–æ–≤–∫–µ!',
        reply_markup=kb.main
    )


@router.callback_query(F.data == 'cancel')
async def cancel_all(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer_photo(
        photo="https://i.ibb.co/ThZqqFz/bn.jpg",
        caption='–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–∂–∏—â–µ! –ì–æ—Ç–æ–≤ –∫ —Å–∞–º–æ–º—É –∫—Ä—É—Ç–æ–º—É –≤–µ—á–µ—Ä—É?\n'
                '–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –±—ã—Å—Ç—Ä–æ –∏ –ª–µ–≥–∫–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –±–∏–ª–µ—Ç –Ω–∞ –Ω–∞—à–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ,'
                '—É–∑–Ω–∞—Ç—å –≤—Å–µ –¥–µ—Ç–∞–ª–∏ –∏ –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ —Å–æ–±—ã—Ç–∏–π. \n–î–∞–≤–∞–π, –≤—ã–±–∏—Ä–∞–π, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ,'
                '–∏ –¥–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ —Ç—É—Å–æ–≤–∫–µ!',
        reply_markup=kb.main
    )


@router.callback_query(F.data == 'pay_ticket')
async def pay_ticket(callback: CallbackQuery):
    database.add_or_update_ticket(callback.from_user.id, callback.data, '–í—ã–±–∏—Ä–∞–µ—Ç', '–ù–µ –æ–ø–ª–∞—á–µ–Ω')
    await callback.answer(" ")
    await callback.message.delete()
    await callback.message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–∏–ª–µ—Ç–∞ üéü:\n'
        '- –¢–∞–Ω—Ü–ø–æ–ª: 690‚ÇΩ\n'
        '- –¢–∞–Ω—Ü–ø–æ–ª+: 849‚ÇΩ\n'
        '- Super VIP: 1390‚ÇΩ\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.',
        reply_markup=kb.ticket_keyboard
    )


@router.callback_query(F.data == "ticket_standard")
async def ticket_standard_callback(callback: CallbackQuery):
    database.add_or_update_ticket(callback.from_user.id, callback.data, '–í—ã–±—Ä–∞–Ω', '–ù–µ –æ–ø–ª–∞—á–µ–Ω')

    await callback.answer(" ")
    await callback.message.delete()
    await callback.message.answer_photo(
        photo="https://i.ibb.co/x2X0W1d/dancefloor.jpg",
        caption="üìù ***–í—ã –≤—ã–±—Ä–∞–ª–∏ –¢–∞–Ω—Ü–ø–æ–ª –±–∏–ª–µ—Ç***\n"
                "üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: 690‚ÇΩ\n"
                "üëâ –î–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:\n"
                "1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ 690‚ÇΩ –Ω–∞ –∫–∞—Ä—Ç—É: –í–ê–® –ù–û–ú–ï–† –ö–ê–†–¢–´ ***(–°–±–µ—Ä–±–∞–Ω–∫, –≤–∞—à –±–∞–Ω–∫ —Ç–æ–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –°–±–µ—Ä–±–∞–Ω–∫)***.\n"
                "2. –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —á–µ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.\n"
                "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç —á–µ–∫ –±–æ—Ç—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.\n"
                "‚ö†Ô∏è –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –≤–∞—à –±–∏–ª–µ—Ç –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, "
                "–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –±–∏–ª–µ—Ç –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.\n"
                "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º —á–µ—Ä–µ–∑ –Ω–∞—à —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –í–ê–® –¢–ì –ê–ô–î–ò.",
        parse_mode="Markdown",
        reply_markup=kb.confirm_keyboard
    )


@router.message(F.document)
async def handle_pdf_upload(message: Message):
    telegram_id = message.from_user.id
    file_name = f'pdf/{telegram_id}.pdf'
    user_id = message.from_user.id
    file_id = message.document.file_id
    document = await message.bot.get_file(file_id)
    await message.bot.download_file(document.file_path, file_name)

    pdf_text = extract_text_from_pdf(file_name)

    line_sum = 17  # –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
    line_name = 7  # –§–ò–û –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    result_line_sum = get_line_from_text(pdf_text, line_sum)
    result_line_name = get_line_from_text(pdf_text, line_name)

    if result_line_sum.strip() == "690,00 ‚ÇΩ" and result_line_name.strip() == "–ò–º—è –≤ —á–µ–∫–µ —Å–±–µ—Ä–±–∞–Ω–∫":
        database.update_payment_status(user_id, "–û–ø–ª–∞—á–µ–Ω–æ")

        # –°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥
        qr = qrcode.make(

            f'{random.randint(1, 1011) * random.randint(10, 10) * random.randint(10, 101)}'
            f'\n–¢–∏–ø –±–∏–ª–µ—Ç–∞: –¢–∞–Ω—Ü–ø–æ–ª\n–°—Ç–∞—Ç—É—Å: –û–ø–ª–∞—á–µ–Ω–æ')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ QR-–∫–æ–¥–∞ –≤ –ø–∞–º—è—Ç–∏
        qr_bytes = io.BytesIO()
        qr.save(qr_bytes, format='PNG')
        qr_bytes.seek(0)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É –ø–æ—Ç–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö

        # –°–æ–∑–¥–∞–µ–º BufferedInputFile –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –∏–∑ –ø–∞–º—è—Ç–∏
        input_file = types.BufferedInputFile(qr_bytes.getvalue(), filename="qr_code.png")
        await message.answer_photo(photo=input_file)

    elif result_line_sum.strip() == "849,00 ‚ÇΩ" and result_line_name.strip() == "–ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è —Å–±–µ—Ä–±–∞–Ω–∫":
        database.update_payment_status(user_id, "–û–ø–ª–∞—á–µ–Ω–æ")

        # –°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥
        qr = qrcode.make(
            f'–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥:{random.randint(1, 1011) * random.randint(10, 10) * random.randint(10, 101)}'
            f'\n–¢–∏–ø –±–∏–ª–µ—Ç–∞: –¢–∞–Ω—Ü–ø–æ–ª+\n–°—Ç–∞—Ç—É—Å: –û–ø–ª–∞—á–µ–Ω–æ')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ QR-–∫–æ–¥–∞ –≤ –ø–∞–º—è—Ç–∏
        qr_bytes = io.BytesIO()
        qr.save(qr_bytes, format='PNG')
        qr_bytes.seek(0)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É –ø–æ—Ç–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö

        input_file = types.BufferedInputFile(qr_bytes.getvalue(), filename="qr_code.png")
        await message.answer_photo(photo=input_file)

    elif result_line_sum.strip() == "1390,00 ‚ÇΩ" and result_line_name.strip() == "–ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è —Å–±–µ—Ä–±–∞–Ω–∫":

        database.update_payment_status(user_id, "–û–ø–ª–∞—á–µ–Ω–æ")

        qr = qrcode.make(
            f'{random.randint(1, 1011) * random.randint(10, 10) * random.randint(10, 101)}'
            f'\n–¢–∏–ø –±–∏–ª–µ—Ç–∞: VIP\n–°—Ç–∞—Ç—É—Å: –û–ø–ª–∞—á–µ–Ω–æ')

        qr_bytes = io.BytesIO()
        qr.save(qr_bytes, format='PNG')
        qr_bytes.seek(0)

        input_file = types.BufferedInputFile(qr_bytes.getvalue(), filename="qr_code.png")
        await message.answer_photo(photo=input_file)

    else:
        await message.answer("–û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—É–º–º—É –∏ –§–ò–û.")


@router.callback_query(F.data == "ticket_plus")
async def ticket_plus_callback(callback: CallbackQuery):
    database.add_or_update_ticket(callback.from_user.id, callback.data, '–í—ã–±—Ä–∞–Ω', '–ù–µ –æ–ø–ª–∞—á–µ–Ω')
    await callback.answer(" ")
    await callback.message.delete()
    await callback.message.answer_photo(
        photo="https://i.ibb.co/tmPmvNS/dancefloor.jpg",
        caption="üìù ***–í—ã –≤—ã–±—Ä–∞–ª–∏ –¢–∞–Ω—Ü–ø–æ–ª+ –±–∏–ª–µ—Ç***\n"
                "üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: 849‚ÇΩ\n"
                "üëâ –î–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:\n"
                "1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ 849‚ÇΩ –Ω–∞ –∫–∞—Ä—Ç—É: –í–ê–® –ù–û–ú–ï–† –ö–ê–†–¢–´ ***(–°–±–µ—Ä–±–∞–Ω–∫, –≤–∞—à –±–∞–Ω–∫ —Ç–æ–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –°–±–µ—Ä–±–∞–Ω–∫)***.\n"
                "2. –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —á–µ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.\n"
                "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç —á–µ–∫ –±–æ—Ç—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.\n"
                "‚ö†Ô∏è –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –≤–∞—à –±–∏–ª–µ—Ç –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, "
                "–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –±–∏–ª–µ—Ç –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.\n"
                "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º —á–µ—Ä–µ–∑ –Ω–∞—à —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –í–ê–® –¢–ì –ê–ô–î–ò.",
        parse_mode="Markdown",
        reply_markup=kb.confirm_keyboard
    )


@router.callback_query(F.data == "ticket_vip")
async def ticket_vip_callback(callback: CallbackQuery):
    database.add_or_update_ticket(callback.from_user.id, callback.data, '–í—ã–±—Ä–∞–Ω', '–ù–µ –æ–ø–ª–∞—á–µ–Ω')
    await callback.answer(" ")
    await callback.message.delete()
    await callback.message.answer_photo(
        photo="https://i.ibb.co/xDZqDYP/superr-vip.jpg",
        caption="üìù ***–í—ã –≤—ã–±—Ä–∞–ª–∏ SUPER VIP –±–∏–ª–µ—Ç***\n"
                "üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: 1390‚ÇΩ\n"
                "üëâ –î–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:\n"
                "1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ 1390‚ÇΩ –Ω–∞ –∫–∞—Ä—Ç—É: –í–ê–® –ù–û–ú–ï–† –ö–ê–†–¢–´ ***(–°–±–µ—Ä–±–∞–Ω–∫, –≤–∞—à –±–∞–Ω–∫ —Ç–æ–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –°–±–µ—Ä–±–∞–Ω–∫)***.\n"
                "2. –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —á–µ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.\n"
                "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç —á–µ–∫ –±–æ—Ç—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.\n"
                "‚ö†Ô∏è –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –≤–∞—à –±–∏–ª–µ—Ç –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, "
                "–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –±–∏–ª–µ—Ç –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.\n"
                "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º —á–µ—Ä–µ–∑ –Ω–∞—à —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –í–ê–® –¢–ì –ê–ô–î–ò.",
        parse_mode="Markdown",
        reply_markup=kb.confirm_keyboard
    )


@router.callback_query(F.data == 'info')
async def catalog(callback: CallbackQuery):
    await callback.answer(" ")
    await callback.message.delete()
    await callback.message.answer(
        text='üìÖ –ö–æ–≥–¥–∞: 9 –Ω–æ—è–±—Ä—è \n'
             'üìç –ì–¥–µ: Aurora Concert Hall\n'
             '***–ü–æ—á–µ–º—É –ø—Ä–æ–¥–∞–∂–∞ –±–∏–ª–µ—Ç–æ–≤ –∏–¥–µ—Ç —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞?***\n '
             "\n"
             '–ú—ã –∑–∞—Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–¥–æ–±–Ω—ã–º –Ω–∞—à–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ'
             ' —Å –≤–∞–º–∏ –∏ —Å–æ–∑–¥–∞—Ç—å —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å'
             ' –Ω–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–æ–≤, –Ω–æ –∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏'
             ' –æ—Ç –Ω–∞—Å, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –∏ –Ω–æ–≤–æ–≤–≤–µ–¥–µ–Ω–∏—è—Ö.',
        parse_mode="Markdown",
        reply_markup=kb.cancalls
    )


@router.callback_query(F.data == 'how_pay')
async def how_pay(callback: CallbackQuery):
    await callback.answer(" ")
    await callback.message.delete()
    await callback.message.answer(
        text="1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ XXXX‚ÇΩ –Ω–∞ –∫–∞—Ä—Ç—É: –í–ê–® –ù–û–ú–ï–† –ö–ê–†–¢–´ ***(–°–±–µ—Ä–±–∞–Ω–∫, –≤–∞—à –±–∞–Ω–∫ —Ç–æ–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –°–±–µ—Ä–±–∞–Ω–∫)***.\n"
             "2. –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —á–µ–∫.\n"
             "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç —á–µ–∫ –±–æ—Ç—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.\n"
             "***‚ö†Ô∏è –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –≤–∞—à –±–∏–ª–µ—Ç –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω,"
             " –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –±–∏–ª–µ—Ç –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.***\n"
             "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º —á–µ—Ä–µ–∑ –Ω–∞—à —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
        parse_mode='Markdown',
        reply_markup=kb.cancalls
    )


@router.callback_query(F.data == 'help')
async def help_user(callback: CallbackQuery):
    await callback.answer(" ")
    await callback.message.delete()
    await callback.message.answer(
        text='–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –±–æ—Ç–æ–º.\n'
             '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –í–ê–® –¢–ì –ê–ô–î–ò.',
        reply_markup=kb.cancalls
    )
